trigger:
- draft-azure

resources:
- repo: self

variables:
- group: Versions
- group: Credentials

stages:
# - stage: BuildTagPush
#   displayName: Build tag and push image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - task: CmdLine@2
#       displayName: Get Project Ver.
#       inputs:
#         script: |
#           cd $(Build.SourcesDirectory)/
#           v=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#           echo $v
#           echo "##vso[task.setvariable variable=PROJECT_VERSION;]$v"
#     - task: PowerShell@2
#       displayName: 'Get and Set group variable for release pipes'
#       inputs:
#         targetType: 'inline'
#         script: |
#           echo $(ACCESS_TOKEN) | az devops login
#           az pipelines variable-group list --group-name Versions --org https://dev.azure.com/mitin18 --project “mitin18”
#           az pipelines variable-group variable update --group-id 1 --name WEBSOCKET_CHAT_DEMO_VERSION --value $env:PROJECT_VERSION --org https://dev.azure.com/mitin18 --project “mitin18”    
#     - task: DockerInstaller@0
#       displayName: Docker install
#       inputs:
#         dockerVersion: '17.09.0-ce'
#     - task: CmdLine@2
#       displayName: Docker build and tag
#       inputs:
#         script: |
#           docker build -t chat-server-draft:$(WEBSOCKET_CHAT_DEMO_VERSION) .
#     - task: CmdLine@2
#       displayName: Image validation
#       inputs:
#         script: |
#           docker images
#     - task: CmdLine@2
#       displayName: Tag and Push
#       inputs:
#         script: |
#           for i in $( docker images | grep $(WEBSOCKET_CHAT_DEMO_VERSION) | awk '{print $1}'); do docker tag $i:$(WEBSOCKET_CHAT_DEMO_VERSION) $(DOCKERHUB_USER)/$i:$(WEBSOCKET_CHAT_DEMO_VERSION); done
#           docker images
#           docker login --username $(DOCKERHUB_USER) --password $(DOCKERHUB_TOKEN) 
#           docker images | grep $(DOCKERHUB_USER) | cut -f 1 -d ' ' | xargs -L1 docker push

- stage: PrepareForDeployment
  displayName: Edit kustomize
  jobs:
  - job: PrepareFordeployment
    displayName: Edit kustomize
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: CmdLine@2
      displayName: Edit kustomize
      inputs:
        script: |
          cd $(Build.SourcesDirectory)/
          cat base/kustomization.yaml
          sed -i '' 's/latest/popo/g' base/kustomization.yaml
          cat base/kustomization.yaml 

# - stage: PushArtifacts
#   displayName: Push Pipeline Artifacts
#   jobs:
#   - job: PushArtifacts
#     displayName: Push Pipeline Artifacts
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - task: PublishBuildArtifacts@1
#       displayName: 'Save stage manifest Folder as Artifact'
#       inputs:
#         PathtoPublish: base
#         ArtifactName: stage-manifests
#     - task: PublishBuildArtifacts@1
#       displayName: 'Save prod manifest Folder as Artifact'
#       inputs:
#         PathtoPublish: overlays
#         ArtifactName: prod manifests